local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
print("🎯 Sniper Aimbot Script Başlatılıyor...")
print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")

-- Function to find the closest player (excluding self)
local function getClosestPlayer()
    local closestHead = nil
    local minDist = math.huge
    local myPos = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") 
        and LocalPlayer.Character.HumanoidRootPart.Position 
        or Camera.CFrame.Position
    
    print("\n[HEDEF ARAMA] Başlatıldı")
    print("├─ Kendi pozisyon: " .. tostring(myPos))
    
    local validTargets = 0
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            if player.Character then
                local head = player.Character:FindFirstChild("Head")
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                
                if not head then
                    print("├─ ✗ " .. player.Name .. " - Head bulunamadı")
                elseif not humanoid then
                    print("├─ ✗ " .. player.Name .. " - Humanoid bulunamadı")
                elseif humanoid.Health <= 0 then
                    print("├─ ✗ " .. player.Name .. " - Ölü (HP: 0)")
                else
                    validTargets = validTargets + 1
                    local dist = (head.Position - myPos).Magnitude
                    print("├─ ✓ " .. player.Name .. " - Mesafe: " .. math.floor(dist) .. " studs")
                    
                    if dist < minDist then
                        minDist = dist
                        closestHead = head
                    end
                end
            else
                print("├─ ✗ " .. player.Name .. " - Character yok")
            end
        end
    end
    
    print("└─ Toplam geçerli hedef: " .. validTargets)
    
    if closestHead then
        print("\n[SONUÇ] ✓ En yakın hedef bulundu!")
        print("├─ Oyuncu: " .. closestHead.Parent.Name)
        print("├─ Mesafe: " .. math.floor(minDist) .. " studs")
        print("└─ Kafa pozisyonu: " .. tostring(closestHead.Position))
    else
        print("\n[SONUÇ] ✗ Hiç geçerli hedef yok!")
    end
    
    return closestHead
end

-- Hook __namecall metamethod
print("\n[KURULUM] __namecall metamethod hook'lanıyor...")

local hookSuccess, hookError = pcall(function()
    local oldNamecall
    oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        local method = getnamecallmethod()
        local args = {...}
        
        -- FireShot RemoteFunction'ını yakala
        if method == "InvokeServer" and self.Name == "FireShot" and self.Parent and self.Parent.Name == "Sniper" then
            print("\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
            print("🔫 [ATEŞ] Hook tetiklendi!")
            print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
            print("\n[ORİJİNAL PARAMETRELER]")
            print("├─ StartPos (Başlangıç): " .. tostring(args[1]))
            print("├─ LookVec (Yön): " .. tostring(args[2]))
            print("└─ Zoom: " .. tostring(args[3]))
            
            local targetHead = getClosestPlayer()
            
            if targetHead then
                -- Kamera pozisyonundan hedefin kafasına doğru yön hesapla
                local startPos = args[1]
                local direction = (targetHead.Position - startPos).Unit
                
                -- Orijinal vektör ile yeni vektör arasındaki açı farkını hesapla
                local originalVec = args[2]
                local angleDiff = math.deg(math.acos(math.clamp(originalVec:Dot(direction), -1, 1)))
                
                -- LookVec'i değiştir
                args[2] = direction
                
                print("\n[MODİFİKASYON] ✓ Parametreler değiştirildi!")
                print("├─ Hedef: " .. targetHead.Parent.Name)
                print("├─ Hedef pozisyon: " .. tostring(targetHead.Position))
                print("├─ Yeni LookVec (Yön): " .. tostring(direction))
                print("├─ StartPos: " .. tostring(startPos) .. " (DEĞİŞMEDİ)")
                print("└─ Açı farkı: " .. math.floor(angleDiff) .. "°")
            else
                print("\n[MODİFİKASYON] ⚠ Hedef bulunamadı")
                print("└─ Orijinal parametreler kullanılıyor")
            end
            
            print("\n[ÇAĞRI] RemoteFunction çağrılıyor...")
            local startTime = tick()
            local result = oldNamecall(self, unpack(args))
            local elapsed = (tick() - startTime) * 1000
            
            print("[SONUÇ] RemoteFunction yanıt verdi")
            print("├─ Dönüş değeri: " .. tostring(result))
            print("└─ İşlem süresi: " .. math.floor(elapsed) .. "ms")
            print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n")
            
            return result
        end
        
        -- Diğer tüm çağrıları normal şekilde geçir
        return oldNamecall(self, ...)
    end)
end)

if hookSuccess then
    print("\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print("✅ BAŞARILI! __namecall hook kuruldu ve aktif.")
    print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print("\nSniper ile ateş etmeyi deneyin. Tüm işlemler loglanacak.\n")
else
    warn("\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    warn("❌ BAŞARISIZ! Hook kurulamadı!")
    warn("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    warn("Hata detayı: " .. tostring(hookError))
    warn("\nExecutor'ünüz hookmetamethod desteklemiyor olabilir.")
    warn("Lütfen başka bir executor deneyin (Synapse X, Script-Ware, etc.)")
end
